{"ast":null,"code":"import _ from 'lodash';\nexport const bellmanFord = (l, matrice) => {\n  let x, lin1, col1, i;\n  const dx = [1, 0, -1, 0];\n  const dy = [0, -1, 0, 1];\n  const a = _.cloneDeep(matrice);\n  const inQueue = [];\n  for (i = 0; i < matrice.length; i++) {\n    inQueue[i] = new Array(matrice.length);\n  }\n  const coada = [];\n  coada.push({\n    lin: 1,\n    col: 1\n  });\n  inQueue[1][1] = 1;\n  l[1][1] = a[1][1];\n  while (coada.length > 0) {\n    x = coada[0];\n    for (let i = 0; i < 4; i++) {\n      lin1 = x.lin + dx[i];\n      col1 = x.col + dy[i];\n      if (a[lin1][col1] !== -1 && a[lin1][col1] + l[x.lin][x.col] < l[lin1][col1]) {\n        l[lin1][col1] = a[lin1][col1] + l[x.lin][x.col];\n        if (!inQueue[lin1][col1] || inQueue[lin1][col1] === 0) {\n          inQueue[lin1][col1] = 1;\n          coada.push({\n            lin: lin1,\n            col: col1\n          });\n        }\n      }\n    }\n    coada.shift();\n    inQueue[x.lin][x.col] = 0;\n  }\n  return l;\n};","map":{"version":3,"names":["_","bellmanFord","l","matrice","x","lin1","col1","i","dx","dy","a","cloneDeep","inQueue","length","Array","coada","push","lin","col","shift"],"sources":["C:/Users/Antonia/Downloads/Antonia 2/src/functions/bellmanFord.js"],"sourcesContent":["import _ from 'lodash';\r\n\r\nexport const bellmanFord = (l, matrice) => {\r\n  let x, lin1, col1, i;\r\n  const dx = [1, 0, -1, 0];\r\n  const dy = [0, -1, 0, 1];\r\n  const a = _.cloneDeep(matrice);\r\n  const inQueue = [];\r\n\r\n  for (i = 0; i < matrice.length; i++) {\r\n    inQueue[i] = new Array(matrice.length);\r\n  }\r\n  const coada = [];\r\n\r\n  coada.push({ lin: 1, col: 1 });\r\n  inQueue[1][1] = 1;\r\n  l[1][1] = a[1][1];\r\n\r\n  while (coada.length > 0) {\r\n    x = coada[0];\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      lin1 = x.lin + dx[i];\r\n      col1 = x.col + dy[i];\r\n\r\n      if (a[lin1][col1] !== -1 && a[lin1][col1] + l[x.lin][x.col] < l[lin1][col1]) {\r\n        l[lin1][col1] = a[lin1][col1] + l[x.lin][x.col];\r\n\r\n        if (!inQueue[lin1][col1] || inQueue[lin1][col1] === 0) {\r\n          inQueue[lin1][col1] = 1;\r\n          coada.push({ lin: lin1, col: col1 });\r\n        }\r\n      }\r\n    }\r\n\r\n    coada.shift();\r\n    inQueue[x.lin][x.col] = 0;\r\n  }\r\n\r\n  return l;\r\n}"],"mappings":"AAAA,OAAOA,CAAC,MAAM,QAAQ;AAEtB,OAAO,MAAMC,WAAW,GAAGA,CAACC,CAAC,EAAEC,OAAO,KAAK;EACzC,IAAIC,CAAC,EAAEC,IAAI,EAAEC,IAAI,EAAEC,CAAC;EACpB,MAAMC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACxB,MAAMC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,MAAMC,CAAC,GAAGV,CAAC,CAACW,SAAS,CAACR,OAAO,CAAC;EAC9B,MAAMS,OAAO,GAAG,EAAE;EAElB,KAAKL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACU,MAAM,EAAEN,CAAC,EAAE,EAAE;IACnCK,OAAO,CAACL,CAAC,CAAC,GAAG,IAAIO,KAAK,CAACX,OAAO,CAACU,MAAM,CAAC;EACxC;EACA,MAAME,KAAK,GAAG,EAAE;EAEhBA,KAAK,CAACC,IAAI,CAAC;IAAEC,GAAG,EAAE,CAAC;IAAEC,GAAG,EAAE;EAAE,CAAC,CAAC;EAC9BN,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;EACjBV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAEjB,OAAOK,KAAK,CAACF,MAAM,GAAG,CAAC,EAAE;IACvBT,CAAC,GAAGW,KAAK,CAAC,CAAC,CAAC;IAEZ,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BF,IAAI,GAAGD,CAAC,CAACa,GAAG,GAAGT,EAAE,CAACD,CAAC,CAAC;MACpBD,IAAI,GAAGF,CAAC,CAACc,GAAG,GAAGT,EAAE,CAACF,CAAC,CAAC;MAEpB,IAAIG,CAAC,CAACL,IAAI,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAII,CAAC,CAACL,IAAI,CAAC,CAACC,IAAI,CAAC,GAAGJ,CAAC,CAACE,CAAC,CAACa,GAAG,CAAC,CAACb,CAAC,CAACc,GAAG,CAAC,GAAGhB,CAAC,CAACG,IAAI,CAAC,CAACC,IAAI,CAAC,EAAE;QAC3EJ,CAAC,CAACG,IAAI,CAAC,CAACC,IAAI,CAAC,GAAGI,CAAC,CAACL,IAAI,CAAC,CAACC,IAAI,CAAC,GAAGJ,CAAC,CAACE,CAAC,CAACa,GAAG,CAAC,CAACb,CAAC,CAACc,GAAG,CAAC;QAE/C,IAAI,CAACN,OAAO,CAACP,IAAI,CAAC,CAACC,IAAI,CAAC,IAAIM,OAAO,CAACP,IAAI,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC,EAAE;UACrDM,OAAO,CAACP,IAAI,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;UACvBS,KAAK,CAACC,IAAI,CAAC;YAAEC,GAAG,EAAEZ,IAAI;YAAEa,GAAG,EAAEZ;UAAK,CAAC,CAAC;QACtC;MACF;IACF;IAEAS,KAAK,CAACI,KAAK,EAAE;IACbP,OAAO,CAACR,CAAC,CAACa,GAAG,CAAC,CAACb,CAAC,CAACc,GAAG,CAAC,GAAG,CAAC;EAC3B;EAEA,OAAOhB,CAAC;AACV,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}